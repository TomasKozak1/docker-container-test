openapi: 3.0.0
info:
  version: 0.9.0
  title: Healthcare Research Platform
servers:
  - url: "http://localhost:3030/api"
    description: Local server
paths:
  /projects:
    get:
      summary: get all project lists
      tags:
        - Project
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectsRes"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new study project for healthcare research
      tags:
        - Project
      requestBody:
        description: project description
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "201":
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /projects/{projectId}:
    parameters:
      - name: projectId
        in: path
        required: true
        description: The id of the pet to retrieve
        schema:
          type: string
    get:
      summary: Info for a specific project
      tags:
        - Project
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectRes"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /projects/{projectId}/users:
    parameters:
      - name: projectId
        in: path
        required: true
        description: The id of the project to register user
        schema:
          type: string
      - name: id-token
        in: header
        description: Unique token of user (generated by firebase)
        example: eyJhbGciOiJSUzI1................NiIsImtpoI6MTTcDFw
        schema:
          type: string
        required: true
    post:
      summary: Register user as a participant of project
      tags:
        - Project
        - Participant
      requestBody:
        description: participant information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Participant"
      responses:
        "201":
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /projects/{projectId}/users/{userId}:
    parameters:
      - name: projectId
        in: path
        required: true
        description: The id of the project to register user
        schema:
          type: string
      - name: userId
        in: path
        required: true
        description: The id of the user to be updated
        schema:
          type: string
      - name: id-token
        in: header
        description: Unique token of user (generated by firebase)
        example: eyJhbGciOiJSUzI1................NiIsImtpoI6MTTcDFw
        schema:
          type: string
        required: true
    patch:
      summary: Update profile of the user
      tags:
        - Project
        - Participant
      requestBody:
        description: participant information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipantUpdate"
      responses:
        "200":
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /projects/{projectId}/tasks:
    parameters:
      - name: projectId
        in: path
        required: true
        description: The id of the project to retrieve
        schema:
          type: string
    get:
      summary: Retrieve a list of tasks
      tags:
        - Project
        - Task
      parameters:
        - name: start_time
          description: If not exists, retrieves all tasks created after start_time
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: end_time
          description: If not exists, retrieves all tasks created before end_time
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: last_sync_time
          description: (called from mobile application) Get tasks that published after last_sync_time
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: status
          description: If not exists, retrieves all tasks regardless of status
          in: query
          required: false
          schema:
            type: string
            enum: [ DRAFT, PUBLISHED ]
        - name: type
          description: If not exists, retrieves all tasks regardless of type
          in: query
          required: false
          schema:
            type: string
            enum: [ SURVEY, ACTIVITY ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tasks"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create task
      tags:
        - Project
        - Task
      requestBody:
        description: type for task
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskType"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskId"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Upload results of task.
      tags:
        - Project
        - Task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskResults"
      responses:
        "201":
          description: OK
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /projects/{projectId}/tasks/{taskId}:
    parameters:
      - name: projectId
        in: path
        required: true
        description: The id of the project to retrieve
        schema:
          type: string
      - name: taskId
        in: path
        required: true
        description: The id of the task
        schema:
          type: string
    get:
      summary: Retrieve tasks with a specific task_id
      tags:
        - Project
        - Task
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tasks"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Edit a specific task
      description: A task only in DRAFT status can be updated. This is for auto-save or status change
      tags:
        - Project
        - Task
      parameters:
        - name: revision_id
          in: query
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskReq"
      responses:
        "204":
          description: No Content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /projects/{projectId}/in-lab-visits:
    parameters:
      - name: projectId
        in: path
        required: true
        description: The id of the project to retrieve
        schema:
          type: string
    post:
      summary: Create in-lab visit data.
      tags:
        - Project
        - In-lab Visit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InLabVisitReq"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InLabVisitRes"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: List in-lab visits
      tags:
        - Project
        - In-lab Visit
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InLabVisitRes"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /projects/{projectId}/in-lab-visits/{inLabVisitId}:
    parameters:
      - name: projectId
        in: path
        required: true
        description: The id of the project to retrieve
        schema:
          type: string
      - name: inLabVisitId
        in: path
        required: true
        description: The id of the in-lab visit data
        schema:
          type: string
    get:
      summary: Retrieve in-lab visits with a specific inLabVisitId
      tags:
        - Project
        - In-lab Visit
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InLabVisitRes"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update in-lab visit data with a specific inLabVisitId
      tags:
        - Project
        - In-lab Visit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InLabVisitUpdateReq"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InLabVisitRes"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Id:
      required:
        - value
      properties:
        value:
          type: integer
    BaseTime:
      properties:
        createdAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    Project:
      required:
        - name
      properties:
        name:
          type: string
        isOpen:
          type: boolean
        info:
          type: object
          additionalProperties:
            type: object
    ProjectRes:
      allOf:
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/Project"
        - $ref: "#/components/schemas/BaseTime"
    ProjectsRes:
      type: array
      items:
        $ref: "#/components/schemas/ProjectRes"
    Projects:
      type: array
      items:
        $ref: "#/components/schemas/Project"
    Participant:
      required:
        - userId
      properties:
        userId:
          type: string
          description: Unique id of user (generated by firebase)
          example: 1cUoc4KcejOY89f2PzDc9Z8Fyf53
        profile:
          type: object
          description: Participant information in JSON with no pre-defined fields
          example: { "birth": "1992-02-24", "gender": "female" }
    ParticipantUpdate:
      required:
        - profile
      properties:
        profile:
          type: object
          description: Participant information in JSON with no pre-defined fields
          example: { "birth": "1992-02-24", "gender": "female" }
    Participants:
      type: array
      items:
        $ref: "#/components/schemas/Participant"
    TextQuestion:
      required:
        - tag
      properties:
        tag:
          type: string
          enum: [ TEXT ]
    ChoiceQuestion:
      required:
        - tag
        - options
      properties:
        tag:
          type: string
          enum: [ RADIO, CHECKBOX, DROPDOWN, IMAGE ]
          description: Only one option can be chosen for radio, dropdown.
            Multiple options can be chosen for checkbox, image.
        options:
          type: array
          items:
            required:
              - value
            properties:
              value:
                type: string
                description: For Image Question, you have to put link of Image in this field.
              label:
                type: string
                description: This field can be used when type is IMAGE to generate Image Question with label
                  Also, if you want to create Image Question with label, all options have to include their own labels
        display_logic:
          type: object
          description: not used in v1.0
        skip_logic:
          type: array
          items:
            $ref: "#/components/schemas/SkipLogic"
    RankQuestion:
      required:
        - tag
        - options
      properties:
        tag:
          type: string
          enum: [ RANK ]
        options:
          type: array
          items:
            required:
              - value
            properties:
              value:
                type: string
    ScaleQuestion:
      required:
        - tag
        - low
        - high
      properties:
        tag:
          type: string
          enum: [ SLIDER ]
        low:
          type: integer
          description: min value of scale
        high:
          type: integer
          description: max value of scale
        lowLabel:
          type: string
          description: label of min value
          example: Somewhat disagree
        highLabel:
          type: string
          description: label of max value
          example: Strongly agree
    DateTimeQuestion:
      required:
        - tag
      properties:
        tag:
          type: string
          enum: [ DATETIME ]
        isTime:
          type: boolean
          default: true
          description: Either isTime or isDate has to be true
        isDate:
          type: boolean
          default: true
          description: Either isTime or isDate has to be true
        isRange:
          type: boolean
          default: false
    Question:
      required:
        - title
        - type
        - properties
      properties:
        title:
          type: string
          description: same with query
        explanation:
          type: string
        required:
          type: boolean
          default: true
        type:
          type: string
          enum: [ CHOICE, TEXT, RANK, SCALE, DATETIME ]
        properties:
          type: object
          description: It depends on the value of 'type'
          oneOf:
            - $ref: "#/components/schemas/ChoiceQuestion"
            - $ref: "#/components/schemas/TextQuestion"
            - $ref: "#/components/schemas/RankQuestion"
            - $ref: "#/components/schemas/ScaleQuestion"
            - $ref: "#/components/schemas/DateTimeQuestion"
    Section:
      properties:
        title:
          type: string
          description: same with query
        properties:
          type: object
          properties:
            display_logic:
              type: object
              description: not used in v1.0
    Activity:
      required:
        - completionTitle
        - type
      properties:
        completionTitle:
          type: string
          description: title of completion message
        completionDescription:
          type: string
        required:
          type: boolean
          default: true
        type:
          type: string
          enum: [ TAPPING_SPEED, REACTION_TIME, RANGE_OF_MOTION, GAIT_AND_BALANCE, GUIDED_BREATHING, STROOP_TEST, SPEECH_RECOGNITION, MOBILE_SPIROMETRY, SUSTAINED_PHONATION ]
        properties:
          type: object
          description: field for configurable values. This is not used for v1.0
    Item:
      required:
        - name
        - type
        - contents
        - sequence
      properties:
        name:
          type: string
        type:
          type: string
          description: Type of Item
          enum: [ QUESTION, SECTION, ACTIVITY ]
        contents:
          oneOf:
            - $ref: "#/components/schemas/Question"
            - $ref: "#/components/schemas/Section"
            - $ref: "#/components/schemas/Activity"
          description: According to the type, it will be changed.
        sequence:
          type: integer
          description: sequence of this item in a task
    Items:
      type: array
      items:
        $ref: "#/components/schemas/Item"
    ItemReq:
      required:
        - type
        - contents
        - sequence
      properties:
        type:
          type: string
          description: Type of Item
          enum: [ QUESTION, SECTION, ACTIVITY ]
        contents:
          oneOf:
            - $ref: "#/components/schemas/Question"
            - $ref: "#/components/schemas/Section"
            - $ref: "#/components/schemas/Activity"
          description: According to the type, it will be changed.
        sequence:
          type: integer
          description: sequence of this item in a task
    ItemsReq:
      type: array
      items:
        $ref: "#/components/schemas/ItemReq"
    TaskId:
      required:
        - revisionId
        - id
      properties:
        revisionId:
          type: integer
        id:
          type: string
    TaskType:
      required:
        - type
      properties:
        type:
          type: string
          enum: [ SURVEY, ACTIVITY ]
    Task:
      required:
        - revisionId
        - id
        - title
        - status
        - type
        - items
      properties:
        revisionId:
          type: integer
        id:
          type: string
        title:
          type: string
        description:
          type: string
        schedule:
          type: string
          description: in cronQuartz format
          example: 0 0/1 * 1/1 * ? *
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
          description: if not exists, there's no expiration.
        validTime:
          type: integer
          description: valid time of each task (minute-based).
        status:
          type: string
          enum: [ DRAFT, PUBLISHED ]
        type:
          type: string
          enum: [ SURVEY, ACTIVITY ]
        items:
          $ref: "#/components/schemas/Items"
    TaskReq:
      required:
        - title
        - status
        - type
        - items
      properties:
        title:
          type: string
        description:
          type: string
        schedule:
          type: string
          description: cronQuartz format. This is required if status is PUBLISHED.
          example: 0 0/1 * 1/1 * ? *
        startTime:
          type: string
          description: This is required if status is PUBLISHED.
          format: date-time
        endTime:
          type: string
          format: date-time
          description: if not exists, there's no expiration.
        validTime:
          type: integer
          description: valid time of each task (minute-based). This is required if status is PUBLISHED.
        status:
          type: string
          enum: [ DRAFT, PUBLISHED ]
        type:
          type: string
          enum: [ SURVEY, ACTIVITY ]
        items:
          $ref: "#/components/schemas/ItemsReq"
    Tasks:
      type: array
      items:
        $ref: "#/components/schemas/Task"
    TaskResult:
      properties:
        revisionId:
          type: integer
        taskId:
          type: string
        userId:
          type: string
        startedAt:
          type: string
          format: date-time
        submittedAt:
          type: string
          format: date-time
        itemResults:
          type: array
          items:
            $ref: "#/components/schemas/ItemResult"
    TaskResults:
      type: array
      items:
        $ref: "#/components/schemas/TaskResult"
    ItemResult:
      properties:
        itemName:
          type: string
        result:
          type: string
    SkipLogic:
      properties:
        condition:
          type: string
          description: Expression that match BranchRule
          example: or contains val4 1 notcontains val4 2
        goToAction:
          type: string
          description: not used in v1.0
          example:
        goToItemSequence:
          type: integer
          description: If condition holds, then skip to sequence $goToItemSequence
          example: 3
    InLabVisitReq:
      required:
        - userId
        - checkedInBy
        - startTime
        - endTime
      properties:
        userId:
          type: string
        checkedInBy:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        notes:
          type: string
    InLabVisitUpdateReq:
      required:
        - userId
        - checkedInBy
        - startTime
        - endTime
      properties:
        userId:
          type: string
        checkedInBy:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        notes:
          type: string
    InLabVisitRes:
      required:
        - id
        - userId
        - checkedInBy
        - startTime
        - endTime
        - notes
        - filesPath
      properties:
        id:
          type: integer
        userId:
          type: string
        checkedInBy:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        notes:
          type: string
        filesPath:
          type: string
          example: in-lab-visit/u1234
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: [ ]
